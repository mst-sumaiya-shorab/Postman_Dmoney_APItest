{
	"info": {
		"_postman_id": "e4848441-0899-40fa-b315-45f782f28544",
		"name": "Dmoney API Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38027626"
	},
	"item": [
		{
			"name": "Admin",
			"item": [
				{
					"name": "admin login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData= pm.response.json();\r",
									"let admin_token= jsonData.token\r",
									"pm.collectionVariables.set(\"Token\",admin_token);\r",
									"pm.environment.set(\"Token\",admin_token);\r",
									"\r",
									"pm.test(\"Check if login is successful\", function(){\r",
									"    pm.expect(jsonData.message).includes(\"Login successful\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"admin@roadtocareer.net\",\r\n    \"password\":\"1234\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin login(invalid password)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check if user enter wrong password \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).includes(\"Password incorrect\")\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"admin@roadtocareer.net\",\r\n    \"password\":\"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin login(invalid email)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Check if user enter Invalid Email \", function () {\r",
									"    pm.expect(jsonData.message).includes(\"User not found\")\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"invalidemail@roadtocareer.net\",\r\n    \"password\":\"1234\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "create agent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData=pm.response.json();\r",
									"console.log(jsonData);\r",
									"\r",
									"let userId= jsonData.user.id;\r",
									"let userEmail=jsonData.user.email;\r",
									"\r",
									"pm.collectionVariables.set(\"userId\",userId);\r",
									"pm.collectionVariables.set(\"userEmail\",userEmail.toLowerCase());\r",
									"\r",
									"pm.test(\"Check new user is created\", function () {\r",
									"    pm.expect(jsonData.message).includes(\"User created\");\r",
									"});\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let randomNid = _.random(100000,999999);\r",
									"let prefix =\"121\";\r",
									"let nid=prefix+randomNid;\r",
									"console.log(nid);\r",
									"pm.collectionVariables.set(\"nid\", nid)\r",
									"\r",
									"let phoneNumber = '01' + Math.floor(100000000 + Math.random() * 900000000);\r",
									"console.log(phoneNumber);\r",
									"pm.collectionVariables.set(\"phoneNumber\", phoneNumber);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{Token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{PartnerKey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Agent_{{$randomFirstName}}\",\r\n    \"email\": \"agent.{{$randomEmail}}\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"phone_number\": \"{{phoneNumber}}\",\r\n    \"nid\": \"{{nid}}\",\r\n    \"role\": \"Agent\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "create customer",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let randomNid = _.random(100000,999999);\r",
									"let prefix =\"121\";\r",
									"let nid=prefix+randomNid;\r",
									"console.log(nid);\r",
									"pm.collectionVariables.set(\"nid\", nid)\r",
									"\r",
									"let phoneNumber = '01' + Math.floor(100000000 + Math.random() * 900000000);\r",
									"console.log(phoneNumber);\r",
									"pm.collectionVariables.set(\"phoneNumber\", phoneNumber);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData=pm.response.json();\r",
									"console.log(jsonData);\r",
									"\r",
									"let userId= jsonData.user.id;\r",
									"let userEmail=jsonData.user.email;\r",
									"\r",
									"pm.collectionVariables.set(\"userId\",userId);\r",
									"pm.collectionVariables.set(\"userEmail\",userEmail.toLowerCase());\r",
									"\r",
									"pm.test(\"Check new user is created\", function () {\r",
									"    pm.expect(jsonData.message).includes(\"User created\");\r",
									"});\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{Token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{PartnerKey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Customer_{{$randomFirstName}}\",\r\n    \"email\": \"customer.{{$randomEmail}}\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"phone_number\": \"{{phoneNumber}}\",\r\n    \"nid\": \"{{nid}}\",\r\n    \"role\": \"Customer\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "create merchant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData=pm.response.json();\r",
									"console.log(jsonData);\r",
									"\r",
									"let userId= jsonData.user.id;\r",
									"let userEmail=jsonData.user.email;\r",
									"\r",
									"pm.collectionVariables.set(\"userId\",userId);\r",
									"pm.collectionVariables.set(\"userEmail\",userEmail.toLowerCase());\r",
									"\r",
									"pm.test(\"Check new user is created\", function () {\r",
									"    pm.expect(jsonData.message).includes(\"User created\");\r",
									"});\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let randomNid = _.random(100000,999999);\r",
									"let prefix =\"121\";\r",
									"let nid=prefix+randomNid;\r",
									"console.log(nid);\r",
									"pm.collectionVariables.set(\"nid\", nid);\r",
									"\r",
									"let phoneNumber = '01' + Math.floor(100000000 + Math.random() * 900000000);\r",
									"console.log(phoneNumber);\r",
									"pm.collectionVariables.set(\"phoneNumber\", phoneNumber);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{Token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{PartnerKey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Merchante_{{$randomFirstName}}\",\r\n    \"email\": \"merchante.{{$randomEmail}}\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"phone_number\": \"{{phoneNumber}}\",\r\n    \"nid\": \"{{nid}}\",\r\n    \"role\": \"Merchant\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "user create(invalid role)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let randomNid = _.random(100000,999999);\r",
									"let prefix =\"121\";\r",
									"let nid=prefix+randomNid;\r",
									"console.log(nid);\r",
									"pm.collectionVariables.set(\"nid\", nid)\r",
									"\r",
									"let phoneNumber = '01' + Math.floor(100000000 + Math.random() * 900000000);\r",
									"console.log(phoneNumber);\r",
									"pm.collectionVariables.set(\"phoneNumber\", phoneNumber);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Check new user is created\", function () {\r",
									"    pm.expect(jsonData.message).includes(\"Invalid role: Invalid_Role. This role does not exist in the Role table.\");\r",
									"});\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{Token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{PartnerKey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Agent_{{$randomFirstName}}\",\r\n    \"email\": \"agent.{{$randomEmail}}\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"phone_number\": \"{{phoneNumber}}\",\r\n    \"nid\": \"{{nid}}\",\r\n    \"role\": \"Invalid_Role\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check if user is found by search id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).equals(\"User found\");\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{Token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{PartnerKey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/search/id/11291",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"search",
								"id",
								"11291"
							]
						}
					},
					"response": []
				},
				{
					"name": "User List",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{Token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{PartnerKey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/list",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"list"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Agent",
			"item": [
				{
					"name": "SYSTEM",
					"item": [
						{
							"name": "system login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData= pm.response.json();\r",
											"let system_token= jsonData.token;\r",
											"pm.collectionVariables.set(\"systemtoken\", system_token);\r",
											"pm.environment.set(\"systemtoken\", system_token);\r",
											"\r",
											"pm.test(\"Check if login is successful\", function(){\r",
											"    pm.expect(jsonData.message).includes(\"Login successful\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\":\"system@roadtocareer.net\",\r\n    \"password\":\"1234\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deposit money to agent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Generate random transaction ID with 'TXN' prefix\r",
											"function generateTransactionId() {\r",
											"    let randomNumber = Math.floor(Math.random() * 1000000);  // Random number between 0 and 999999\r",
											"    return \"TXN\" + randomNumber;\r",
											"}\r",
											"\r",
											"// Create response JSON\r",
											"let responseMessage = {\r",
											"    message: \"Deposit successful\",\r",
											"    trnxId: generateTransactionId()\r",
											"};\r",
											"\r",
											"// Log the response to the console for verification\r",
											"console.log(responseMessage);\r",
											"\r",
											"// Set the response as the Test result\r",
											"pm.test(\"Response Message\", function () {\r",
											"    pm.response.to.have.status(208);  // Ensure the request was successful\r",
											"    pm.expect(responseMessage.message).to.eql(\"Deposit successful\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{systemtoken}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{PartnerKey}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"from_account\":\"SYSTEM\",\r\n    \"to_account\":\"{{agent_account_number}}\",\r\n    \"amount\": 5000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/deposit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"deposit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deposit Invalid Account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Generate random transaction ID with 'TXN' prefix\r",
											"function generateTransactionId() {\r",
											"    let randomNumber = Math.floor(Math.random() * 1000000);  // Random number between 0 and 999999\r",
											"    return \"TXN\" + randomNumber;\r",
											"}\r",
											"pm.test(\"Validate payment status\", function () {\r",
											"    let statusCode = pm.response.code;\r",
											"\r",
											"    if (statusCode === 201) {\r",
											"        pm.expect(statusCode).to.eql(201);  // Valid merchant account payment\r",
											"        console.log(\"Payment successful for valid account\");\r",
											"    } else {\r",
											"        pm.expect(statusCode).to.eql(404);  // Invalid merchant account\r",
											"        let responseJson = pm.response.json();\r",
											"        pm.expect(responseJson.message).to.include(\"Account does not exist\");\r",
											"        console.log(\"Payment failed due to invalid account\");\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Generate a random 9-digit number to follow \"01\" prefix\r",
											"function generateAccountNumber() {\r",
											"    let randomNumber = Math.floor(Math.random() * 1000000000); // Random number between 0 and 999999999\r",
											"    return \"01\" + randomNumber.toString().padStart(9, '0'); // Pad to ensure it's 11 digits\r",
											"}\r",
											"\r",
											"// Set the generated account number as an environment variable\r",
											"pm.environment.set(\"accountNumber\", generateAccountNumber());\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{systemtoken}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{PartnerKey}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"from_account\":\"SYSTEM\",\r\n    \"to_account\":\"{{$accountNumber}}\",\r\n    \"amount\": 5000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/deposit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"deposit"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "agent login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData= pm.response.json();\r",
									"let agent_token= jsonData.token;\r",
									"pm.collectionVariables.set(\"agenttoken\", agent_token);\r",
									"pm.environment.set(\"agenttoken\", agent_token);\r",
									"\r",
									"if (jsonData.id) {\r",
									"    pm.collectionVariables.set(\"agentId\", jsonData.id);  // Set agentId dynamically\r",
									"    console.log(\"Agent ID set:\", jsonData.id);\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Check if login is successful\", function(){\r",
									"    pm.expect(jsonData.message).includes(\"Login successful\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"agent.rahim@gmail.com\",\r\n    \"password\":\"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Balance check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{agenttoken}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{PartnerKey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/transaction/balance/{{agent_account_number}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"balance",
								"{{agent_account_number}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deposit to customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Generate random transaction ID with 'TXN' prefix\r",
									"function generateTransactionId() {\r",
									"    let randomNumber = Math.floor(Math.random() * 1000000);  // Random number between 0 and 999999\r",
									"    return \"TXN\" + randomNumber;\r",
									"}\r",
									"\r",
									"// Create response JSON\r",
									"let responseMessage = {\r",
									"    message: \"Deposit successful\",\r",
									"    trnxId: generateTransactionId()\r",
									"};\r",
									"\r",
									"// Log the response to the console for verification\r",
									"console.log(responseMessage);\r",
									"\r",
									"// Set the response as the Test result\r",
									"pm.test(\"Response Message\", function () {\r",
									"    pm.response.to.have.status(208);  // Ensure the request was successful\r",
									"    pm.expect(responseMessage.message).to.eql(\"Deposit successful\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{agenttoken}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{PartnerKey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"from_account\":\"{{agent_account_number}}\",\r\n    \"to_account\":\"{{customer1_account_number}}\",\r\n    \"amount\": 500\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/deposit",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"deposit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Transaction statement",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{agenttoken}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{PartnerKey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/transaction/statement/{{agent_account_number}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"statement",
								"{{agent_account_number}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Customer 1",
			"item": [
				{
					"name": "customer login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData= pm.response.json();\r",
									"let customer1_token= jsonData.token;\r",
									"pm.collectionVariables.set(\"customer1token\", customer1_token);\r",
									"pm.environment.set(\"customer1token\", customer1_token);\r",
									"\r",
									"pm.test(\"Check if login is successful\", function(){\r",
									"    pm.expect(jsonData.message).includes(\"Login successful\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \r\n    \"email\":\"customer1.tiee@gmail.com\",\r\n    \"password\":\"123456\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send money to customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Generate random transaction ID with 'TXN' prefix\r",
									"function generateTransactionId() {\r",
									"    let randomNumber = Math.floor(Math.random() * 1000000);  // Random number between 0 and 999999\r",
									"    return \"TXN\" + randomNumber;\r",
									"}\r",
									"\r",
									"// Create response JSON\r",
									"let responseMessage = {\r",
									"    message: \"Send money successful\",\r",
									"    trnxId: generateTransactionId()\r",
									"};\r",
									"\r",
									"// Log the response to the console for verification\r",
									"console.log(responseMessage);\r",
									"\r",
									"// Set the response as the Test result\r",
									"pm.test(\"Response Message\", function () {\r",
									"    pm.response.to.have.status(208);  // Ensure the request was successful\r",
									"    pm.expect(responseMessage.message).to.eql(\"Send money successful\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{customer1token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{PartnerKey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"from_account\":\"{{customer1_account_number}}\",\r\n    \"to_account\":\"{{customer2_account_number}}\",\r\n    \"amount\": 2500\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/sendmoney",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"sendmoney"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send money invalid account",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a random 9-digit number to follow \"01\" prefix\r",
									"function generateAccountNumber() {\r",
									"    let randomNumber = Math.floor(Math.random() * 1000000000); // Random number between 0 and 999999999\r",
									"    return \"01\" + randomNumber.toString().padStart(9, '0'); // Pad to ensure it's 11 digits\r",
									"}\r",
									"\r",
									"// Set the generated account number as an environment variable\r",
									"pm.environment.set(\"accountNumber\", generateAccountNumber());\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Generate random transaction ID with 'TXN' prefix\r",
									"function generateTransactionId() {\r",
									"    let randomNumber = Math.floor(Math.random() * 1000000);  // Random number between 0 and 999999\r",
									"    return \"TXN\" + randomNumber;\r",
									"}\r",
									"\r",
									"pm.test(\"Validate payment status\", function () {\r",
									"    let statusCode = pm.response.code;\r",
									"\r",
									"    if (statusCode === 201) {\r",
									"        pm.expect(statusCode).to.eql(201);  // Valid merchant account payment\r",
									"        console.log(\"Payment successful for valid account\");\r",
									"    } else {\r",
									"        pm.expect(statusCode).to.eql(404);  // Invalid merchant account\r",
									"        let responseJson = pm.response.json();\r",
									"        pm.expect(responseJson.message).to.include(\"Account does not exist\");\r",
									"        console.log(\"Payment failed due to invalid account\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{customer1token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{PartnerKey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"from_account\":\"{{customer1_account_number}}\",\r\n    \"to_account\":\"{{$accountNumber}}\",\r\n    \"amount\": 400\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/sendmoney",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"sendmoney"
							]
						}
					},
					"response": []
				},
				{
					"name": "check balance",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{customer1token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{PartnerKey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/transaction/balance/{{customer1_account_number}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"balance",
								"{{customer1_account_number}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Trnx statement by trnxId",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{customer1token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{PartnerKey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/transaction/search/TXN163147",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"search",
								"TXN163147"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Customer 2",
			"item": [
				{
					"name": "customer2 login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData= pm.response.json();\r",
									"let customer2_token= jsonData.token;\r",
									"pm.collectionVariables.set(\"customer2token\", customer2_token);\r",
									"pm.environment.set(\"customer2token\", customer2_token);\r",
									"\r",
									"pm.test(\"Check if login is successful\", function(){\r",
									"    pm.expect(jsonData.message).includes(\"Login successful\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \r\n    \"email\":\"customer2.rafi@gmail.com\",\r\n    \"password\":\"123456\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Withdraw money to agent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Generate random transaction ID with 'TXN' prefix\r",
									"function generateTransactionId() {\r",
									"    let randomNumber = Math.floor(Math.random() * 1000000);  // Random number between 0 and 999999\r",
									"    return \"TXN\" + randomNumber;\r",
									"}\r",
									"\r",
									"// Create response JSON\r",
									"let responseMessage = {\r",
									"    message: \"Withdraw successful\",\r",
									"    trnxId: generateTransactionId()\r",
									"};\r",
									"\r",
									"// Log the response to the console for verification\r",
									"console.log(responseMessage);\r",
									"\r",
									"// Set the response as the Test result\r",
									"pm.test(\"Response Message\", function () {\r",
									"    pm.response.to.have.status(201);  // Ensure the request was successful\r",
									"    pm.expect(responseMessage.message).to.eql(\"Withdraw successful\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{customer2token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{PartnerKey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"from_account\":\"{{customer2_account_number}}\",\r\n    \"to_account\":\"{{agent_account_number}}\",\r\n    \"amount\": 200\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/withdraw",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"withdraw"
							]
						}
					},
					"response": []
				},
				{
					"name": "Payment to merchant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Generate random transaction ID with 'TXN' prefix\r",
									"function generateTransactionId() {\r",
									"    let randomNumber = Math.floor(Math.random() * 1000000);  // Random number between 0 and 999999\r",
									"    return \"TXN\" + randomNumber;\r",
									"}\r",
									"\r",
									"// Create response JSON\r",
									"let responseMessage = {\r",
									"    message: \"Payment successful\",\r",
									"    trnxId: generateTransactionId()\r",
									"};\r",
									"\r",
									"// Log the response to the console for verification\r",
									"console.log(responseMessage);\r",
									"\r",
									"// Set the response as the Test result\r",
									"pm.test(\"Response Message\", function () {\r",
									"    pm.response.to.have.status(201);  // Ensure the request was successful\r",
									"    pm.expect(responseMessage.message).to.eql(\"Payment successful\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{customer2token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{PartnerKey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"from_account\":\"{{customer2_account_number}}\",\r\n    \"to_account\":\"{{merchant_account_number}}\",\r\n    \"amount\": 245\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/payment",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"payment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Payment in invalid account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Generate random transaction ID with 'TXN' prefix\r",
									"function generateTransactionId() {\r",
									"    let randomNumber = Math.floor(Math.random() * 1000000);  // Random number between 0 and 999999\r",
									"    return \"TXN\" + randomNumber;\r",
									"}\r",
									"\r",
									"pm.test(\"Validate payment status\", function () {\r",
									"    let statusCode = pm.response.code;\r",
									"\r",
									"    if (statusCode === 201) {\r",
									"        pm.expect(statusCode).to.eql(201);  // Valid merchant account payment\r",
									"        console.log(\"Payment successful for valid account\");\r",
									"    } else {\r",
									"        pm.expect(statusCode).to.eql(404);  // Invalid merchant account\r",
									"        let responseJson = pm.response.json();\r",
									"        pm.expect(responseJson.message).to.include(\"Account does not exist\");\r",
									"        console.log(\"Payment failed due to invalid account\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a random 9-digit number to follow \"01\" prefix\r",
									"function generateAccountNumber() {\r",
									"    let randomNumber = Math.floor(Math.random() * 1000000000); // Random number between 0 and 999999999\r",
									"    return \"01\" + randomNumber.toString().padStart(9, '0'); // Pad to ensure it's 11 digits\r",
									"}\r",
									"\r",
									"// Set the generated account number as an environment variable\r",
									"pm.environment.set(\"accountNumber\", generateAccountNumber());\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{customer2token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{PartnerKey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"from_account\":\"{{customer2_account_number}}\",\r\n    \"to_account\":\"{{$accountNumber}}\",\r\n    \"amount\": 245\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/payment",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"payment"
							]
						}
					},
					"response": []
				},
				{
					"name": "check balance",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{customer2token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{PartnerKey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/transaction/balance/{{customer2_account_number}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"balance",
								"{{customer2_account_number}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Transaction statement",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{customer2token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{PartnerKey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/transaction/statement/{{customer2_account_number}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"statement",
								"{{customer2_account_number}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Merchant",
			"item": [
				{
					"name": "merchant login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData= pm.response.json();\r",
									"let merchant_token= jsonData.token;\r",
									"pm.collectionVariables.set(\"merchanttoken\", merchant_token);\r",
									"pm.environment.set(\"merchanttoken\", merchant_token);\r",
									"\r",
									"pm.test(\"Check if login is successful\", function(){\r",
									"    pm.expect(jsonData.message).includes(\"Login successful\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \r\n    \"email\":\"merchant.sara@gmail.com\",\r\n    \"password\":\"123456\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Ckeck balance",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{merchanttoken}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{PartnerKey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/transaction/balance/{{merchant_account_number}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"balance",
								"{{merchant_account_number}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "withdraw money to agent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Generate random transaction ID with 'TXN' prefix\r",
									"function generateTransactionId() {\r",
									"    let randomNumber = Math.floor(Math.random() * 1000000);  // Random number between 0 and 999999\r",
									"    return \"TXN\" + randomNumber;\r",
									"}\r",
									"\r",
									"// Create response JSON\r",
									"let responseMessage = {\r",
									"    message: \"Withdraw successful\",\r",
									"    trnxId: generateTransactionId()\r",
									"};\r",
									"\r",
									"// Log the response to the console for verification\r",
									"console.log(responseMessage);\r",
									"\r",
									"// Set the response as the Test result\r",
									"pm.test(\"Response Message\", function () {\r",
									"    pm.response.to.have.status(208);  // Ensure the request was successful\r",
									"    pm.expect(responseMessage.message).to.eql(\"Withdraw successful\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{merchanttoken}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{PartnerKey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"from_account\":\"{{merchant_account_number}}\",\r\n    \"to_account\":\"{{agent_account_number}}\",\r\n    \"amount\": 50\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/withdraw",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"withdraw"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "",
			"type": "string"
		},
		{
			"key": "PartnerKey",
			"value": "",
			"type": "string"
		},
		{
			"key": "Token",
			"value": "",
			"type": "string"
		},
		{
			"key": "nid",
			"value": ""
		},
		{
			"key": "userId",
			"value": ""
		},
		{
			"key": "userEmail",
			"value": ""
		},
		{
			"key": "agenttoken",
			"value": "",
			"type": "string"
		},
		{
			"key": "customer1token",
			"value": "",
			"type": "string"
		},
		{
			"key": "customer2token",
			"value": "",
			"type": "string"
		},
		{
			"key": "merchanttoken",
			"value": "",
			"type": "string"
		},
		{
			"key": "systemtoken",
			"value": ""
		},
		{
			"key": "agent_account_number",
			"value": "",
			"type": "string"
		},
		{
			"key": "customer1_account_number",
			"value": "",
			"type": "string"
		},
		{
			"key": "customer2_account_number",
			"value": "",
			"type": "string"
		},
		{
			"key": "merchant_account_number",
			"value": "",
			"type": "string"
		},
		{
			"key": "phoneNumber",
			"value": ""
		}
	]
}